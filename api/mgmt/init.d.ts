/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HumanAddr = string;
export type Uint128 = string;
/**
 * Just a wrapped `Vec` with `get` and `insert` methods.
 *
 * Acts as a KV map but serializes as an array of [K,V] pairs: * new keys are appended to the end, existing keys are updated in place * there is no check for keys being unique during deserialization * in case of duplicate keys, it's the 1st instance of a given key that "counts".
 *
 * It's like this because `serde_json_wasm` doesn't serialize maps (`HashMap`, `BTreeMap`). This is true even in versions more recent than the default for SecretNetwork: the `serialize_map` method contains a single `unreachable!()` panic. It's not immediately obvious why this remains the case the case; perhaps iterating over of those is somehow more expensive on a blockchain? In any case, in the absence of gas benchmarks it's pointless to risk altering the default execution environment (of which `serde_json_wasm` is part), even though there's no obvious reason why that wouldn't work.
 */
export type LinearMapFor_HumanAddrAnd_Uint128 = [HumanAddr, Uint128][];

export interface Init {
  history?: LinearMapFor_HumanAddrAnd_Uint128 | null;
  schedule: ScheduleFor_HumanAddr;
  token: [HumanAddr, string];
  [k: string]: unknown;
}
/**
 * Contains `Pool`s that must add up to `total`.
 */
export interface ScheduleFor_HumanAddr {
  pools: PoolFor_HumanAddr[];
  total: Uint128;
  [k: string]: unknown;
}
/**
 * Subdivision of `Schedule`, contains `Account`s, may be `partial`. If `partial == false`, they must add up to `total`.
 */
export interface PoolFor_HumanAddr {
  accounts: AccountFor_HumanAddr[];
  name: string;
  /**
   * if `true`, adding new `Account`s is allowed at runtime, up to `total`. otherwise, accounts must add up to `total` at creation.
   */
  partial: boolean;
  total: Uint128;
  [k: string]: unknown;
}
/**
 * Individual vesting config. Immediate release is thought of as a special case of vesting where: * `head == total` * `duration == interval == 0`, * only `head_allocations` is considered.
 */
export interface AccountFor_HumanAddr {
  /**
   * Recipient address
   */
  address: HumanAddr;
  /**
   * Funds that this account will release
   */
  amount: Uint128;
  /**
   * If `> 0`, releases this much money the first time, pushing back the regular portions
   */
  cliff: Uint128;
  /**
   * If `> 0`, vesting stops after this much seconds regardless of how much is left of `total`.
   */
  duration: number;
  /**
   * How many seconds to wait between portions
   */
  interval: number;
  /**
   * Human-readable name
   */
  name: string;
  /**
   * How many seconds after contract launch to begin vesting
   */
  start_at: number;
  [k: string]: unknown;
}
