#!/usr/bin/env node

const { readFileSync, writeFileSync, existsSync } = require('fs')
const { resolve, basename, extname } = require('path')
const { execFileSync } = require('child_process')
const { env, argv, stdout, stderr, exit } = require('process')

const { scheduleFromSpreadsheet } = require('@hackbg/schedule')

require('@hackbg/fadroma').entrypoint(module, function main (
  args = argv.slice(2)
) {
  require('yargs')(args)
    .demandCommand(1, '') // print usage by default

    .command('docs [crate]',
      'build Rust documentation and open it in a browser',
      yargs => yargs.positional('crate', {
        describe: 'path to input file',
        default: 'sienna_schedule'
      }),
      docs)

    .command('test',
      'run test suites for entire Cargo workspace',
      runTests)

    .command('coverage',
      'generate test coverage for the entire Cargo workspace and open it in a browser',
      generateCoverage)

    .command('configure [file]',
      'convert a spreadsheet into a JSON schedule for the contract',
      yargs => yargs.positional('file', {
        describe: 'path to input file',
        default: resolve(__dirname, 'config', 'config.ods')
      }),
      convert)

    .command('deploy',
      'deploys and configures all contracts',
      deploy)

    .argv

})

function stdoutify (fn) {
  const withBigInts = (k, v) => typeof v === 'bigint' ? v.toString() : v
  return (...args) => stdout.write(JSON.stringify(fn(...args), withBigInts, 2))
}

function docs ({crate}) {
  const target = resolve(__dirname, 'target', 'doc', crate, 'index.html')
  try {
    cargo('doc')
  } catch (e) {
    stderr.write('\nü§î Building documentation failed.')
    if (existsSync(target)) {
      stderr.write(`\n‚è≥ Opening what exists at ${target}...`)
    } else {
      return
    }
  }
  const url = `file:///${target}`
  require('open')(url)
}

function convert ({file}) {
  file = resolve(file)
  const name = basename(file, extname(file)) // path without extension
  const schedule = scheduleFromSpreadsheet({ file })
  stderr.write(require('prettyjson').render(schedule))
}

function runTests () {
  if (env.TMUX) {
    run('clear')
    run('tmux', 'clear-history')
  }
  stderr.write(`‚è≥ Running tests...\n\n`)
  try {
    cargo('test')
    stderr.write('\nüòÅ Tests ran successfully.\n')
  } catch (e) {
    stderr.write('\nüò≥ Tests failed.\n')
  }
}

function generateCoverage () {
  // fixed by https://github.com/rust-lang/cargo/issues/9220
  let output = resolve(__dirname, 'docs', 'coverage')
  cargo('tarpaulin', '--out=Html', '--output-dir='+output)
    //'tarpaulin', 
    //'--avoid-cfg-tarpaulin', // ???
    //'--workspace', // obviously
    //'--no-fail-fast', // try to continue on test failure
    //'--verbose', // why not
    //'-o', 'Html', // output as html
    //`--exclude-files=${resolve(__dirname, 'libraries', 'platform')}`, // ignore vendor libs
    //`--output-dir=${output}`
  //)
}

function deploy () {
  stderr.write('\nNot implemented.')
  exit(0)
}

function cargo (...args) {
  run('cargo', '--color=always', ...args)
}

function run (cmd, ...args) {
  stderr.write(`\nüèÉ running:\n${cmd} ${args.join(' ')}\n\n`)
  execFileSync(cmd, [...args], {stdio:'inherit'})
}
