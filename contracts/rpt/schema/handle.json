{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Handle",
  "anyOf": [
    {
      "description": "Set how funds will be split.",
      "type": "object",
      "required": [
        "configure"
      ],
      "properties": {
        "configure": {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/LinearMap_for_HumanAddr_and_Uint128"
            }
          }
        }
      }
    },
    {
      "description": "Receive and distribute funds. `WARNING` a cliff on the RPT account would totally confuse this",
      "type": "object",
      "required": [
        "vest"
      ],
      "properties": {
        "vest": {
          "type": "object"
        }
      }
    }
  ],
  "definitions": {
    "HumanAddr": {
      "type": "string"
    },
    "LinearMap_for_HumanAddr_and_Uint128": {
      "description": "Just a wrapped `Vec` with `get` and `insert` methods.\n\nActs as a KV map but serializes as an array of [K,V] pairs: * new keys are appended to the end, existing keys are updated in place * there is no check for keys being unique during deserialization * in case of duplicate keys, it's the 1st instance of a given key that \"counts\".\n\nIt's like this because `serde_json_wasm` doesn't serialize maps (`HashMap`, `BTreeMap`). This is true even in versions more recent than the default for SecretNetwork: the `serialize_map` method contains a single `unreachable!()` panic. It's not immediately obvious why this remains the case the case; perhaps iterating over of those is somehow more expensive on a blockchain? In any case, in the absence of gas benchmarks it's pointless to risk altering the default execution environment (of which `serde_json_wasm` is part), even though there's no obvious reason why that wouldn't work.",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/HumanAddr"
          },
          {
            "$ref": "#/definitions/Uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
