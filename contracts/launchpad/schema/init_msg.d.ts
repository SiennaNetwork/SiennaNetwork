/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HumanAddr = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
export type Uint128 = string;
export type TokenTypeFor_HumanAddr =
  | {
      custom_token: {
        contract_addr: HumanAddr;
        token_code_hash: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      native_token: {
        denom: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

export interface InitMsg {
  /**
   * Should be the address of the original sender, since this is initiated by the factory.
   */
  admin: HumanAddr;
  /**
   * Used by the Launchpad to register itself with the factory.
   */
  callback: CallbackFor_HumanAddr;
  entropy: Binary;
  /**
   * Seed for creating viewkey
   */
  prng_seed: Binary;
  tokens: TokenSettings[];
  [k: string]: unknown;
}
/**
 * Info needed to have the other contract respond.
 */
export interface CallbackFor_HumanAddr {
  /**
   * Info about the contract requesting the callback.
   */
  contract: ContractLinkFor_HumanAddr;
  /**
   * The message to call.
   */
  msg: Binary;
  [k: string]: unknown;
}
/**
 * Info needed to talk to a contract instance.
 */
export interface ContractLinkFor_HumanAddr {
  address: HumanAddr;
  code_hash: string;
  [k: string]: unknown;
}
/**
 * Configuration for single token that can be locked into the launchpad
 */
export interface TokenSettings {
  bounding_period: number;
  segment: Uint128;
  token_type: TokenTypeFor_HumanAddr;
  [k: string]: unknown;
}
