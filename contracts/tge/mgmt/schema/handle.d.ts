/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Handle =
  | {
      set_status: {
        level: ContractStatusLevel;
        new_address?: HumanAddr | null;
        reason: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_owner: {
        new_admin: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      configure: {
        schedule: Schedule;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      add_account: {
        account: Account;
        pool_name: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      launch: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      claim: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type ContractStatusLevel = "Operational" | "Paused" | "Migrating";
export type HumanAddr = string;
export type Uint128 = string;

/**
 * Contains `Pool`s that must add up to `total`.
 */
export interface Schedule {
  pools: Pool[];
  total: Uint128;
  [k: string]: unknown;
}
/**
 * Subdivision of `Schedule`, contains `Account`s, may be `partial`. If `partial == false`, they must add up to `total`.
 */
export interface Pool {
  accounts: Account[];
  name: string;
  /**
   * if `true`, adding new `Account`s is allowed at runtime, up to `total`. otherwise, accounts must add up to `total` at creation.
   */
  partial: boolean;
  total: Uint128;
  [k: string]: unknown;
}
/**
 * Individual vesting config. Immediate release is thought of as a special case of vesting where: * `head == total` * `duration == interval == 0`, * only `head_allocations` is considered.
 */
export interface Account {
  /**
   * Recipient address
   */
  address: HumanAddr;
  /**
   * Funds that this account will release
   */
  amount: Uint128;
  /**
   * If `> 0`, releases this much money the first time, pushing back the regular portions
   */
  cliff: Uint128;
  /**
   * If `> 0`, vesting stops after this much seconds regardless of how much is left of `total`.
   */
  duration: number;
  /**
   * How many seconds to wait between portions
   */
  interval: number;
  /**
   * Human-readable name
   */
  name: string;
  /**
   * How many seconds after contract launch to begin vesting
   */
  start_at: number;
  [k: string]: unknown;
}
