{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InitMsg",
  "type": "object",
  "required": [
    "distribution",
    "mgmt",
    "portion",
    "token"
  ],
  "properties": {
    "admin": {
      "anyOf": [
        {
          "$ref": "#/definitions/HumanAddr"
        },
        {
          "type": "null"
        }
      ]
    },
    "distribution": {
      "$ref": "#/definitions/LinearMap_and_Uint128"
    },
    "mgmt": {
      "$ref": "#/definitions/ContractLink"
    },
    "portion": {
      "$ref": "#/definitions/Uint128"
    },
    "token": {
      "$ref": "#/definitions/ContractLink"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ContractLink": {
      "description": "Info needed to talk to a contract instance.",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/HumanAddr"
        },
        "code_hash": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "HumanAddr": {
      "type": "string"
    },
    "LinearMap_and_Uint128": {
      "description": "Just a wrapped `Vec` with `get` and `insert` methods.\n\nActs as a KV map but serializes as an array of [K,V] pairs: * new keys are appended to the end, existing keys are updated in place * there is no check for keys being unique during deserialization * in case of duplicate keys, it's the 1st instance of a given key that \"counts\".\n\nIt's like this because `serde_json_wasm` doesn't serialize maps (`HashMap`, `BTreeMap`). This is true even in versions more recent than the default for SecretNetwork: the `serialize_map` method contains a single `unreachable!()` panic. It's not immediately obvious why this remains the case the case; perhaps iterating over of those is somehow more expensive on a blockchain? In any case, in the absence of gas benchmarks it's pointless to risk altering the default execution environment (of which `serde_json_wasm` is part), even though there's no obvious reason why that wouldn't work.",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/HumanAddr"
          },
          {
            "$ref": "#/definitions/Uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
