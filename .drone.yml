kind: pipeline
type: docker
name: Smart Contract Build, Test And Coverage
volumes: [ { name: cache, host: { path: /var/lib/drone/sienna-cache } } ]
steps:

  # Repo setup #####################################################################################

  # Clone submodules.
  # The main repo is cloned automatically, but,
  # in order to clone the submodules, an SSH key is needed.
  - name:        submodules
    image:       alpine/git
    environment: { DRONE_KEY: { from_secret: drone_key } }
    commands:
    #
    # Deploy the service account's private key from org secrets.
    # This needs to be set up in two places:
    #   0. Generate a ssh key locally with `ssh-keygen -t rsa` (ed25519 seems not to work)
    #   1. Private key goes into organization secrets.
    #   2. Public key goes into service account public keys.
    #   3. Delete the generated SSH key from your local filesystem.
    #
    - pwd
    - ls -al
    - mkdir -p ~/.ssh
    - printenv DRONE_KEY > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa
    #
    # Add git server to known hosts
    #
    - ssh-keyscan git.sienna.network >> ~/.ssh/known_hosts
    #
    # The usual `git submodule update --init --recursive` won't do. Here's why.
    # 1. The project repo lives on the private forge, and can have
    #    the correct submodule URLs in its root `.gitmodules` file.
    # 2. However, some of the public submodules live on GitHub, which
    #    does not let unauthenticated users clone over SSH, nor does it
    #    allow the same deploy key to be used across multiple repos.
    # 3. Those public submodules are also mirrored by the private forge,
    #    and it is preferable to use those mirrors rather than connect to GitHub.
    #    Therefore, the `.gitmodules` files of each submodule which has submodules
    #    need to be edited to point to the private forge URLs, rather than to the
    #    public GitHub URLs. Otherwise it is impossible to clone the submodules.
    # 4. Thankfully, there's only one level of this, in fact only one `.gitmodules`
    #    file needs to be updated.
    - git submodule update --init
    - cd deps/fadroma
    - sed -i -e 's|git@github.com:.\+/|git@git.sienna.network:siennanetwork/|' .gitmodules
    - git submodule update --init

  # Rust part ######################################################################################

  # Restore cache if present.
  # See http://plugins.drone.io/meltwater/drone-cache/
  - name:     get-rust-cache
    depends_on:
      - submodules
    image:    meltwater/drone-cache:dev
    volumes:  [ { name: cache, path: /tmp/cache } ]
    settings:
      backend:   "filesystem"
      restore:   true
      cache_key: "{{ .Repo.Name }}"
      mount:     [ "/drone/src/.cargo-home", "/drone/src/target" ]

  - name:        build
    depends_on:
      - get-rust-cache
    image:       xd009642/tarpaulin
    # This container needs to be privileged to generate coverage
    # because Tarpaulin relies on disabling ASLR for the process
    # in order to perform tracing. Maybe try grcov after all.
    # privileged:  true
    environment: 
      COVERAGE_KEY: { from_secret: coverage_key }
      CARGO_HOME: /drone/src/.cargo-home
    commands:
    # Are these needed or not?
    #- rustup toolchain install stable
    #- rustup set profile minimal
    #- rustup target add wasm32-unknown-unknown
    # But we aint doing coverage anyway, just seeing if the contract builds
    #- cargo tarpaulin --workspace --ignore-panics --ignore-tests --coveralls $COVERAGE_KEY --report-uri https://cov.sienna.network/api/v1/jobs
    - cargo build
    - cargo test
    - pwd
    - ls -al
    - echo $HOME
    - ls -al $HOME
    - export

  # Update cache.
  # See http://plugins.drone.io/meltwater/drone-cache/
  - name:     set-rust-cache
    depends_on:
      - build
    image:    meltwater/drone-cache:dev
    volumes:  [ { name: cache, path: /tmp/cache } ]
    settings:
      backend:   "filesystem"
      rebuild:   true
      cache_key: "{{ .Repo.Name }}"
      mount:     [ "/drone/src/.cargo-home", "/drone/src/target" ]

  # Node part ######################################################################################

  # Restore cache if present.
  - name:     get-node-cache
    depends_on:
      - submodules
    image:    meltwater/drone-cache:dev
    volumes:  [ { name: cache, path: /tmp/cache } ]
    settings:
      backend:   "filesystem"
      restore:   true
      cache_key: "{{ .Repo.Name }}"
      mount:     [ "/drone/src/.pnpm-store/v3", "/drone/src/node_modules" ]

  # Install dependencies and make sure ops scripts work
  - name:  pnpm-deps
    depends_on:
      - get-node-cache
    image: node:14-slim
    commands:
      - npm i -g pnpm
      - pnpm i --unsafe-perm

  # Update cache.
  - name:     set-node-cache
    depends_on:
      - pnpm-deps
    image:    meltwater/drone-cache:dev
    volumes:  [ { name: cache, path: /tmp/cache } ]
    settings:
      backend:   "filesystem"
      rebuild:   true
      cache_key: "{{ .Repo.Name }}"
      mount:     [ "/drone/src/.pnpm-store/v3", "/drone/src/node_modules" ]

  # Run tests
  - name:  pnpm-test
    depends_on:
      - set-node-cache
    image: node:14-slim
    commands:
      - cat package.json
      - npm i -g pnpm
      - pnpm -w dev
      - pnpm -w dev test clients
      - pnpm -w ops pulsar-2
      - pnpm -w ops secret-3
