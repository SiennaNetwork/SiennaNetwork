[workspace]
members = [
  "api", # JSON schema exporter

  # TGE
  "libraries/schedule",          # model of TGE vesting logic
  "libraries/linear-map",        # simple way of storing small number of addresses
  "contracts/snip20-sienna",     # SNIP20 reference impl with deposit/redeem disabled
  "contracts/mgmt",              # mints and vests tokens according to schedule
  "contracts/rpt",               # claims from mgmt and splits the portion between recipients
  "contracts/rewards",           # TODO: leave only this and use MGMT and RPT from tge
  "contracts/rewards-factory",   # instantiates and holds reward pool contracts
  "libraries/schedule-rewards",  # experimental continuous rewards algorithm
  "contracts/rewards-benchmark", # gas benchmark for continuous rewards

  # Swap + IDO
  "libraries/amm-shared",      # definitions that are shared between AMM and IDO
  "contracts/exchange",        # uniswap exchange contract implementation
  "contracts/factory",         # factory contract for creating exchanges
  "contracts/ido",             # Sienna IDO
  "contracts/lp-token",        # snip20 liquidity provider token,
  "contracts/amm-snip20",      # vanilla snip20 token, used when creating an IDO

  # Lending
  "libraries/lend-experimental",        # <- https://github.com/SiennaNetwork/sienna-lend/tree/future-atoken-experimental/contracts/libraries
  #"contracts/lend-atoken"              # <- https://github.com/SiennaNetwork/sienna-lend/tree/master/contracts/atoken/src
  "contracts/lend-atoken-experimental", # <- https://github.com/SiennaNetwork/sienna-lend/tree/future-atoken-experimental/contracts/atoken
  "contracts/lend-configuration",       # <- https://github.com/SiennaNetwork/sienna-lend/tree/future-atoken-experimental/contracts/configuration
  #"contracts/snip20-lend"              # <- https://github.com/SiennaNetwork/sienna-lend/tree/master/packages/snip20
  "contracts/snip20-lend-experimental", # <- https://github.com/SiennaNetwork/sienna-lend/tree/future-atoken-experimental/packages/snip20

  # Framework
  "libraries/fadroma-21.07/scrt-admin/composable-admin", # proc macro for `require_admin` attribute
  "libraries/fadroma-21.07/scrt-admin/require-admin",    # implementation of admin check
  "libraries/fadroma-21.07/scrt-contract",               # contract wrapper macro
  "libraries/fadroma-21.07/scrt-migrate",                # pause contracts and mark them for upgrade
  "libraries/fadroma-21.07/scrt-snip20-api",             # interface to external snip20 token
  "libraries/fadroma-21.07/scrt-storage",                # storage access shorthand functions
  "libraries/fadroma-21.07/scrt-utils",                  # grab bag of utility functions
  "libraries/migrate",  # migration flag, as used by TGE before merging this feature into Fadroma
  "libraries/kukumba",  # BDD testing framework
]

[profile.release]
opt-level = 3
debug = false
rpath = false
lto = true
debug-assertions = false
codegen-units = 1
panic = 'abort'
incremental = false
overflow-checks = true
